from flask import Flask, request, jsonify
import requests
import os

app = Flask(__name__)

# Load environment variables
JUP_AG_API_URL = os.getenv("JUP_AG_API_URL", "https://station.jup.ag/api-v6/post-swap-instructions")
METEORA_API_URL = os.getenv("METEORA_API_URL", "https://dlmm-api.meteora.ag/swagger-ui/")
TRADINGVIEW_API_URL = os.getenv("TRADINGVIEW_API_URL")

# API Endpoints

@app.route('/swap', methods=['POST'])
def swap():
    """Handles token swap requests via Jup.AG API"""
    data = request.json
    headers = {'Content-Type': 'application/json'}
    response = requests.post(JUP_AG_API_URL, json=data, headers=headers)
    if response.status_code == 200:
        return jsonify(response.json())
    return jsonify({"error": "Swap failed", "details": response.text}), response.status_code


@app.route('/pool', methods=['POST'])
def create_pool():
    """Handles liquidity pool creation via Meteora API"""
    data = request.json
    headers = {'Content-Type': 'application/json'}
    response = requests.post(METEORA_API_URL, json=data, headers=headers)
    if response.status_code == 200:
        return jsonify(response.json())
    return jsonify({"error": "Pool creation failed", "details": response.text}), response.status_code


@app.route('/chart', methods=['GET'])
def get_chart():
    """Fetches market chart data from TradingView API"""
    symbol = request.args.get('symbol')
    if not symbol:
        return jsonify({"error": "Symbol parameter is required"}), 400

    headers = {'Content-Type': 'application/json'}
    params = {'symbol': symbol}
    response = requests.get(TRADINGVIEW_API_URL, params=params, headers=headers)
    if response.status_code == 200:
        return jsonify(response.json())
    return jsonify({"error": "Chart data retrieval failed", "details": response.text}), response.status_code

# Utility Functions

def calculate_fees(amount, fee_percentage):
    """Calculates transaction or pool fees."""
    return amount * (fee_percentage / 100)

@app.route('/fees', methods=['POST'])
def get_fees():
    """Calculates fees for transactions or pool creation."""
    data = request.json
    try:
        amount = float(data['amount'])
        fee_percentage = float(data.get('fee_percentage', 0.25))
        fees = calculate_fees(amount, fee_percentage)
        return jsonify({"amount": amount, "fees": fees})
    except (KeyError, ValueError):
        return jsonify({"error": "Invalid input data"}), 400

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
